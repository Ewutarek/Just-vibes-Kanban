<style>
body.board {
  background-image: url("{{board.image}}");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

</style>

<body class="board">
<div class="bg-opacity">

<section class="editBoardPage" ondragover="event.preventDefault()" ondrop="openPopUp('deletePopUp')"> 
    <div>
        <center><h1>{{board.title}} <button class="button" onclick="showSettings()"><span class="material-icons">settings</span></button></h1></center>
        <div id="users"></div>
    </div>
    <section class="listContainer">
        <div id="toDoList" class="listToDo" ondragover="event.preventDefault()" ondrop="moveTask(event, -1)">
        </div>
        <div id="inProgressList" class="listInProgress" ondragover="event.preventDefault()" ondrop="moveTask(event, 0)">    
        </div>
        <div id="doneList" class="listDone" ondragover="event.preventDefault()" ondrop="moveTask(event, 1)">
        </div>
    </section>
</section>


<div class="editform-popup" id="deletePopUp" style="display: none;"> 
<label>Would you like to delete this task?</label>
<button onclick="deleteTask()">Yes</button>
<button onclick="closePopUp('deletePopUp')">No</button>
</div>

<div class="editform-popup" id="editTaskPopUp" style="display: none;">
</div>

<div class="editform-popup" id="settingsPopUp"> 
</div>

<script>
    var notStarted = []
    var inProgress = []
    var done = []
    var users = []
    var otherUsers = []
    var taskId = null

    async function showUsers() {
        users = await fetch('/users').then(res => res.json())
        otherUsers = await fetch('/otherUsers').then(res => res.json())
        document.getElementById("users").innerHTML = `
            <h1>Collaborators:</h1>
                    <div class="grid-container">

            ${users.map(user => `<div class="grid-item"><img class="avatar" src="${user.avatar}">${user.username}</div>`).join(" ")}

            </div>


        `
    }
    async function showLists() {
        notStarted = await fetch('/notStarted').then(res => res.json())
        inProgress = await fetch('/inProgress').then(res => res.json())
        done = await fetch('/done').then(res => res.json())
        document.getElementById("toDoList").innerHTML = `
            <h4>To Do</h4>
            ${notStarted.map(task => showTask(task)).join("")}
            <aside class="task">
                <div>
                    <form onsubmit="addTask(event, this)">
                        <input name="text" placeholder="Add Task" required/>
                        <button>Add</button>
                    <form>
                </div>
            </aside>
        `
        document.getElementById("inProgressList").innerHTML = `
            <h4>In Progress</h4>
            ${inProgress.map(task => showTask(task)).join("")}
        `
        document.getElementById("doneList").innerHTML = `
            <h4>Done</h4>
            ${done.map(task => showTask(task)).join("")}
        `
    }
    showTask = (task => `
        <aside class="task" ondragover="event.preventDefault()" ondrop="reorderTasks(event, ${task.status}, ${task.priority})">
            <div id=${task.id} draggable="true" ondragstart="onDragStart(event)">
                ${showTextAndAssignee(task)}
                <button onclick="showEditTask(${task.id},'${task.text}')" >✏️</button>
            </div> 
            <br>
        </aside>
    `)
    function showTextAndAssignee (task) {
        var assignee= "unassigned"
        users.forEach(user => {
            if (user.id == task.UserId) {
                assignee = user.avatar
            }
        })
        if (assignee == "unassigned") {
            return `<label>${task.text}</label>`
        }
        else {
            return `<label>${task.text}</label> <img class="avatar" src="${assignee}" style="height:3rem;" > `
        }
    }
    function onDragStart(event) {
        taskId = event.target.id
    }
    async function addTask(event, form) {
        event.preventDefault()
        const data = new FormData(form)
        const text = data.get("text")
        const task = {text: text}
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(task)
        }
        await fetch("/editBoard/{{board.id}}/addTask", postRequest)
        showLists()
    }
    async function moveTask(event, listIn) {
        event.preventDefault()
        event.stopPropagation()
        const id = taskId
        const index1 = notStarted.findIndex(task => task.id == id)
        const index2 = inProgress.findIndex(task => task.id == id)
        const index3 = done.findIndex(task => task.id == id)
        if (index1 > -1) {
            listOut = -1
        }
        else if (index2 > -1) {
            listOut = 0
        }
        else {
            listOut = 1
        }
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([index1,index2,index3,listOut, listIn])
        }
        await fetch('/moveTask', postRequest)
        showLists()
    }
    async function deleteTask() {
        event.preventDefault()
        const id = taskId
        const index1 = notStarted.findIndex(task => task.id == id)
        const index2 = inProgress.findIndex(task => task.id == id)
        const index3 = done.findIndex(task => task.id == id)
        if (index1 > -1) {
            list = -1
        }
        else if (index2 > -1) {
            list = 0
        }
        else {
            list = 1
        }
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([index1,index2,index3,list])
        }
        await fetch('/deleteTask', postRequest)
        closePopUp('deletePopUp')
        closePopUp('editTaskPopUp')
        showLists()
    }
    async function reorderTasks(event, listIn, priority) {
        event.preventDefault()
        event.stopPropagation()
        const id = taskId
        const index1 = notStarted.findIndex(task => task.id == id)
        const index2 = inProgress.findIndex(task => task.id == id)
        const index3 = done.findIndex(task => task.id == id)
        if (index1 > -1) {
            listOut = -1
        }
        else if (index2 > -1) {
            listOut = 0
        }
        else {
            listOut = 1
        }
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([index1,index2,index3,listOut, listIn, priority])
        }
        await fetch('/reorderTasks', postRequest)
        showLists()
    }
    function showEditTask (id,text) {
        openPopUp("editTaskPopUp")
        taskId = id
        document.getElementById("editTaskPopUp").innerHTML = `
            <form onsubmit="editTask(event, this)"> 
                <label>Text:</label>
                <input name="text" placeholder="${text}" value="${text}" />
                <p><label>Assigned to:<label>
                <select name="assignee">
                    ${users.map(user => `<option value=${user.id}>${user.username}</option>`).join("")}
                </select> </p>
                <button>Submit</button>
                <button type="button" onclick="deleteTask()" >Delete</button>
                <button type="button" onclick="closePopUp('editTaskPopUp')" >Cancel</button>
            </form>
        `
    }
    async function editTask(event, form) {
        event.preventDefault()
        const data = new FormData(form)
        const id = taskId
        const text = data.get("text")
        const assignee = data.get("assignee")
        const index1 = notStarted.findIndex(task => task.id == id)
        const index2 = inProgress.findIndex(task => task.id == id)
        const index3 = done.findIndex(task => task.id == id)
        if (index1 > -1) {
            list = -1
        }
        else if (index2 > -1) {
            list = 0
        }
        else {
            list = 1
        }
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([index1,index2,index3,list,text,assignee])
        }
        await fetch('/editTask', postRequest)
        closePopUp("editTaskPopUp")
        showLists()
    }
    function showSettings() {
        openPopUp("settingsPopUp")
        document.getElementById("settingsPopUp").innerHTML = `
            <form onsubmit="editBoard(event, this)"> 
                <label>Title:</label>
                <input name="title" placeholder="{{board.title}}" value="{{board.title}}" />
                <p><label>Add users:<label>
                <select name="users" multiple="multiple">
                    ${otherUsers.map(user => `<option value=${user.id}>${user.username}</option>`).join("")}
                </select></p> 
                <button>Submit</button>
                <button type="button" onclick="deleteBoard()">Delete</button>
                <button type="button" onclick="closePopUp('settingsPopUp')">Cancel</button>
            </form>
        `
    }
    async function editBoard(event, form) {
        event.preventDefault()
        const data = new FormData(form)
        const id = {{board.id}}
        const title = data.get("title")
        const users = data.getAll("users")
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([id, title, users])
        }
        await fetch('/editBoard', postRequest)
        location.reload()
    }
    async function deleteBoard() {
        id = {{board.id}}
        const postRequest = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify([id])
        }
        await fetch('/deleteBoard',postRequest)
        window.location.href = '/myBoards'
    }
    function openPopUp(popUpId) {
        document.getElementById(popUpId).style.display = "block";
    }
    function closePopUp(popUpId) {
        document.getElementById(popUpId).style.display = "none";
    }
    showUsers()   
    showLists()
</script>
</div>
</body>